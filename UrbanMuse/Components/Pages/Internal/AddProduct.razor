@page "/product/add"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using UrbanMuse.DataBase
@using UrbanMuse.Models
@inject ModelContext ef
@inject NavigationManager nm
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<div class="store-header">
    <img class="store-header-img" src="LocalImage/IconAndGroup/amphora.svg">
    <div class="store-header-logo-text">
        URBAN MUSE
    </div>
    <div class="store-header-text-container">
        <div class="store-header-text-home-2025">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                HOME
            </NavLink>
        </div>
        <div class="store-header-text-store">
            <NavLink class="nav-link" href="store">STORE</NavLink>
        </div>
    </div>
</div>

<div class="registered-custom-background">
    <div class="input-group-container" >
        <div class="product-form">
            <table class="product-table">
                <tr>
                    <td><label for="name">Название:</label></td>
                    <td><InputText id="name" @bind-Value="_product.Name" placeholder="Введите название" /></td>
                </tr>
                <tr>
                    <td><label for="price">Стоимость:</label></td>
                    <td><InputNumber id="price" @bind-Value="_product.Price" placeholder="Введите стоимость" /></td>
                </tr>
                <tr>
                    <td><label for="description">Описание:</label></td>
                    <td>
                        <InputTextArea id="description" @bind-Value="_product.Description" placeholder="Описание товара" />
                    </td>
                </tr>
                <tr>
                    <td><label for="type">Тип товара:</label></td>
                    <td>
                        <InputSelect id="type" @bind-Value="_product.Type">
                            @foreach (var productEnumType in Enum.GetValues(typeof(ProductType)).Cast<ProductType>())
                            {
                            <option value="@productEnumType">@productEnumType</option>
                            }
                        </InputSelect>
                    </td>
                </tr>
            </table>
        </div>

        <h4>Фотографии товара</h4>
        <div class="photo-section">
            <InputFile OnChange="@OnFilesSelected" enctype="multipart/form-data" />
            <div class="photos-preview">
                @foreach (var photo in _photos)
                {
                    <div class="photo-container" @key="photo.TempId">
                        <img src="@GetImageSrc(photo)" class="photo-preview" />
                        <button class="delete-btn" @onclick="@(() => RemovePhoto(photo))">X</button>
                    </div>
                }
            </div>
        </div>

        <button class="save-btn" @onclick="OnValidSubmit">Сохранить товар</button>
    </div>
</div>


@code {

    private Product _product = new();
    private List<Photo> _photos = new();

    private IReadOnlyList<IBrowserFile> selectedFiles;

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        if (selectedFiles.Count == 0)
            return;

        foreach (var file in selectedFiles)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(5 * 1024 * 1024)
                .CopyToAsync(ms);
            var photo = new Photo
            {
                Data = ms.ToArray(),
                ContentType = file.ContentType
            };
            _photos.Add(photo);
            _product.Photos.Add(photo);
        }

        StateHasChanged();
    }

    private async Task OnValidSubmit()
    {
        _product.Photos = _photos.ToList();
        _product.CreatedAt = DateTime.Now;
        
        ef.Products.Add(_product);
        await ef.SaveChangesAsync();
        
        _product = new();
        _photos.Clear();
        selectedFiles = null;
    }

    private string GetImageSrc(Photo photo)
    {
        if (photo?.Data == null || photo.Data.Length == 0)
        {
            return string.Empty;
        }
        Console.WriteLine(photo.Data.Length);
        Console.WriteLine(photo.ContentType);


        var base64 = Convert.ToBase64String(photo.Data);
        return $"data:{photo.ContentType};base64,{base64}";
    }

    private void RemovePhoto(Photo photo)
    {
        var target = _photos.FirstOrDefault(p => p.TempId == photo.TempId);
        if (target != null)
        {
            _photos.Remove(target);
            StateHasChanged();
        }
    }
}