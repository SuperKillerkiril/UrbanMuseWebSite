@page "/test123"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using UrbanMuse.Models
@using UrbanMuse.DataBase
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@inject ModelContext ef
@inject NavigationManager nm
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Добавление нового товара</h3>

<div class="product-form">
    <table class="product-table">
        <tr>
            <td><label for="name">Название:</label></td>
            <td><InputText id="name" @bind-Value="product.Name" placeholder="Введите название" /></td>
        </tr>
        <tr>
            <td><label for="price">Стоимость:</label></td>
            <td><InputNumber id="price" @bind-Value="product.Price" placeholder="Введите стоимость" /></td>
        </tr>
        <tr>
            <td><label for="description">Описание:</label></td>
            <td>
                <InputTextArea id="description" @bind-Value="product.Description" placeholder="Описание товара" />
            </td>
        </tr>
        <tr>
            <td><label for="type">Тип товара:</label></td>
            <td>
                <InputSelect id="type" @bind-Value="product.Type">
                    @foreach (ProductType productEnumType in Enum.GetValues(typeof(ProductType)))
                    {
                        <option value="@productEnumType">@productEnumType</option>
                    }
                </InputSelect>
            </td>
        </tr>
    </table>
</div>

<h4>Фотографии товара</h4>
<div class="photo-section">
    <InputFile OnChange="OnFilesSelected" multiple />
    <div class="photos-preview">
        @foreach (var photo in photos)
        {
        <div class="photo-container">
            <img src="@GetImageSrc(photo)" class="photo-preview" />
            <button class="delete-btn" @onclick="@(() => RemovePhoto(photo))">X</button>
        </div>
        }
    </div>
</div>

<button class="save-btn" @onclick="OnValidSubmit">Сохранить товар</button>

@code {
    private Product product = new();
    private List<Photo> photos = new();
    
    
    private IReadOnlyList<IBrowserFile> selectedFiles;

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        
        if (selectedFiles.Count == 0)
            return;
        
            foreach (var file in selectedFiles)
            {
                var photo = new Photo();
                using var ms = new MemoryStream();
                await file.OpenReadStream(5 * 1024 * 1024)
                    .CopyToAsync(ms);

                photos.Add(photo);
                product.Photos.Add(photo);
            }
        
    }

    private async Task OnValidSubmit()
    {
        ef.Products.Add(product);
        await ef.SaveChangesAsync();

        // сброс формы
        product = new();
        selectedFiles = null;
    }
    private string GetImageSrc(Photo img)
    {
        return $"data:{img.ContentType};base64,{Convert.ToBase64String(img.Data)}";
    } 

    private void RemovePhoto(Photo photo)
    {
        photos.Remove(photo);
        product.Photos.Remove(photo);
    }
}
