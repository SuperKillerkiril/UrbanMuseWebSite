@page "/registered"
@using UrbanMuse.DataBase
@using UrbanMuse.Models
@inject NavigationManager NavigationManager
@inject ModelContext ef
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="registered-custom-background">
    <div class="registered-container">
        <h3 class="registered-text">REGISTERED</h3>
        <div class="registered-form">
            <input class="registered-form-input" type="text" @bind="_client.Name" placeholder="What should call you"/>
            <input class="registered-form-input" type="text" @bind="_client.Email" placeholder="Email"/>
            <input class="registered-form-input" type="password" @bind="_client.Password" placeholder="Password"/>
            <input class="registered-form-input" type="date" @bind="_client.BirthDate" placeholder="Birthday Date"/>
            <button class="registered-form-button" @onclick="Register">ACCEPT</button>
            @if (IsAuth)
            {
            <button class="registered-form-button" @onclick="ReAuth">log in to a new account</button>
            }
        </div>
        <NavLink class="nav-link" href="auth">have an account?</NavLink>
        @Msg
    </div>
</div>





@code {
    public Client _client = new Client();
    private string Msg;
    private bool IsAuth;

    protected override async void OnInitialized()
    {
        IsAuth = await LocalStorage.GetItemAsync<bool>("IsAuth");
        if (IsAuth)
        {
            Msg = "You have successfully logged in";
        }
        StateHasChanged();
    }
    private void ReAuth()
    {
        LocalStorage.SetItemAsync("IsAuth", false);
        Msg = "Enter your account details";
        StateHasChanged();
    }
    
    public async Task Register()
    {
        if (ef.Clients.Any(c => c.Email == _client.Email))  
        {
            Msg = "This email is already busy.";
            return;
        }
        try
        {
            _client.Role = RoleEnum.Guest;
            ef.Add(_client); 
            ef.SaveChanges();
                
            await LocalStorage.SetItemAsync("clientId", _client.Id);
            await LocalStorage.SetItemAsync("clientemail", _client.Email);
            await LocalStorage.SetItemAsync("clientpassword", _client.Password);
            await LocalStorage.SetItemAsync("IsAuth", true);
                
            await Task.Delay(1000);
            Msg = "Registration successful!";
            NavigationManager.NavigateTo("auth");
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
        }
        
    }
}