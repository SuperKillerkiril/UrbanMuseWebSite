@page "/store"
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Query.SqlExpressions
@using UrbanMuse.DataBase
@using UrbanMuse.Models
@rendermode InteractiveServer
@inject ModelContext ef
@inject IJSRuntime IJSRuntime
@inject NavigationManager Navigation


<div class="store-header">
    <img class="store-header-img" src="LocalImage/IconAndGroup/amphora.svg">
        <NavLink class="nav-link" href="about">
            <div class="store-header-logo-text">
                URBAN MUSE
            </div>
        </NavLink>
    <div class="store-header-text-container">
        <div class="store-header-text-home-2025">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                HOME
            </NavLink>
        </div>
        <div class="store-header-text-store">
            <NavLink class="nav-link" href="store">STORE</NavLink>
        </div>
        <div class="store-header-text-home-2025">
            @_actualYear
        </div><!--Можно кодом актуальный год поставить или год самой свежей коллекции (фильтр по бд)-->
    </div>
    <div class="store-header-button-container">
        <NavLink href="">
            <div class="store-header-button">
                <img src="LocalImage/IconAndGroup/profile.svg"/>
            </div>
        </NavLink>
        <NavLink href="cart">
            <div class="store-header-button">
                <img src="LocalImage/IconAndGroup/shopping-basket.svg"/>
            </div>
        </NavLink>
    </div>
</div>

<div class="home-custom-background">
    <div class="store-title-slogan">
        ART IN EVERYDAY
    </div>
    <div class="store-background-catalog">
        <div class="store-filter-container">
            
            <button class="store-filter-allprod" @onclick="ClearFilter">
                <img src="LocalImage/IconAndGroup/shopping-basket.svg"/>
                <a>ALL PRODUCT</a>
            </button>
            
            <button class="store-filter-button" @onclick="ToggleMenuType">
                <img src="LocalImage/IconAndGroup/list.svg"/>
                <a>TYPE</a>
            </button>
            
            @if (IsMenuTypeOpen)
            {
                <select class="dropdown-store-menu" @bind="_searchOption.ProductType">
                    @foreach (ProductType productEnumType in Enum.GetValues(typeof(ProductType)))
                    {
                        <option value="@productEnumType">@productEnumType</option>
                    }
                </select>
            }
            
            <button class="store-filter-button" @onclick="ToggleMenuPrice">
                <img class="store-filter-img" src="LocalImage/IconAndGroup/circle-percent.svg"/>
                <a>PRICE</a>
            </button>
            
            @if (IsMenuPriseOpen)
            {
                <div class="dropdown-store-menu">
                    <div class="dropdown-store-menu-input-container">
                        <a>от</a>
                        <input type="text" @bind="_searchOption.Min"/>
                    </div>
                    <div class="dropdown-store-menu-input-container">
                        <a>до</a>
                        <input type="text" @bind="_searchOption.Max"/>
                    </div>
                    
                </div>
            }
            
            <button class="store-filter-button">
                <img src="LocalImage/IconAndGroup/circle-check.svg"/>
                <a>PREORDER</a>
            </button>
            
            <button class="store-filter-button" @onclick="ReSearchByTypeAndPrice"><a>apply</a></button>
        </div>
       
        
        <div class="store-catalog">
            <div class="store-catalog-search-bar-container">
                <div class="store-catalog-search-bar">
                    <img src="LocalImage/IconAndGroup/search.svg"/>
                    <input @bind="_searchOption.SearchText" type="text" placeholder="Search on stuff"/>
                    <button @onclick="ReSearchBySearchText">Search</button>
                </div>
            </div>
            
            <div class="store-product-card-container">
                @foreach (var prod in _products)
                {
                    <div class="store-product-card">
                        @foreach (var photo in prod.Photos)
                        {
                            <img src="@GetImageSrc(photo)" alt="@GetImageSrc(photo)"/>
                            break;
                        }
                        <div class="store-product-card-description">
                            <div class="store-product-card-name">@prod.Name</div>
                            <div class="store-product-card-name">@prod.Price</div>
                        </div>
                        <div class="store-product-card-description">
                            <button class="store-product-card-button-add-to-cart">Add to cart</button>
                            <button class="store-product-card-button-buy" @onclick="() => GoToProductDetail(prod.Id)">Buy</button>
                        </div>
                    </div>
                }
            </div>
            @msg
            <div class="store-catalog-more">
                <button>more</button>
            </div>
        </div>
    </div>
    
</div>


@code {
    private List<Product> _products = new();
    private SearchOption _searchOption = new();
    private readonly int _actualYear = DateTime.Now.Year;
    private int HowMuchToTake = 10;    
    private bool IsMenuTypeOpen = false;
    private bool IsMenuPriseOpen = false;
    private string msg;

    protected override void OnInitialized()
    {
        LoadProduct();
    }
    private void LoadProduct()
    {
        _products = ef.Products
            .Include(p => p.Photos)
            .Take(HowMuchToTake).ToList();
    }
    private void GoToProductDetail(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }
    
    private void ToggleMenuType()
    {
        IsMenuTypeOpen = !IsMenuTypeOpen;
    }
    private void ToggleMenuPrice()
    {
        IsMenuPriseOpen = !IsMenuPriseOpen;
    }
    
    void ClearFilter()
    {
        _searchOption = new SearchOption();
        HowMuchToTake = 10;
        LoadProduct();
        StateHasChanged();
    }
    private string GetImageSrc(Photo photo)
    {
        if (photo?.Data == null || photo.Data.Length == 0)
        {
            return string.Empty;
        }
        
        var base64 = Convert.ToBase64String(photo.Data);
        return $"data:{photo.ContentType};base64,{base64}";
    }

    
    private async Task ReSearchByTypeAndPrice()
    {
        _products = await ef.Products
            .Where(p => p.Price >= _searchOption.Min && p.Price <= _searchOption.Max)
            .Where(p => p.Type == _searchOption.ProductType.ToString()).ToListAsync();
    }

    private async Task ReSearchBySearchText()
    {
        _products = await ef.Products
            .Where(p => EF.Functions.Like(p.Name, $"%{_searchOption.SearchText}%")
                        || EF.Functions.Like(p.Name, $"%{_searchOption.SearchText[0]}%"))
            .ToListAsync();
    }
}